{"version":3,"sources":["cryptomonedas.png","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MensajeError","styled","p","Error","mensage","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","console","log","CoinInfo","Id","Name","FullName","Boton","input","Formulario","guardarMoneda","guadarCriptomoneda","listadocript","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","async","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","Resultado","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","AppContainer","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de2e5aed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst MensajeError = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #FFF;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: 'Bebas Neue', cursive;\n`;\n\nconst Error = ({mensage }) => {\n  return ( \n    <MensajeError>\n      {mensage}\n    </MensajeError>\n\n   );\n}\n \nexport default Error;"," import React, { Fragment, useState } from 'react';\n import styled from '@emotion/styled'; \n\n const Label = styled.label`\n     font-family: 'Bebas Neue', cursive;\n     color: #FFF;\n     text-transform: uppercase;\n     font-weight: bold;\n     font-size: 2.4rem;\n     margin-top: 2rem;\n     display: block; \n `;\n\n const Select =  styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none; \n    font-size: 1.2 rem;\n `;\n \n const useMoneda = (label, stateInicial, opciones) => {\n  // State de nuestro custom hook \n  const [state, actualizarState] = useState(stateInicial);\n\n   const Seleccionar = () => (\n     <Fragment>\n       <Label>{label}</Label>\n       <Select\n        onChange = {e => actualizarState(e.target.value)}\n        value={state}\n       >\n         <option value=''>--  Seleccione  --</option>\n         {opciones.map(opcion => (\n           <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\n         ))}\n       </Select>\n     </Fragment>\n   );\n\n   // Retornar state, interfaz y fn que modifica el state\n   return [state, Seleccionar, actualizarState]\n };\n\n export default useMoneda; ","import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled'; \n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block; \n`;\n\nconst Select =  styled.select`\n   width: 100%;\n   display: block;\n   padding: 1rem;\n   -webkit-appearance: none;\n   border-radius: 10px;\n   border: none; \n   font-size: 1.2 rem;\n`;\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n  console.log(opciones);\n  \n // State de nuestro custom hook \n const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <Select\n       onChange = {e => actualizarState(e.target.value)}\n       value={state}\n      >\n        <option value=''>--  Seleccione  --</option>\n        {opciones.map(opcion => (\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\n         ))}\n      </Select>\n    </Fragment>\n  );\n\n  // Retornar state, interfaz y fn que modifica el state\n  return [state, SelectCripto, actualizarState]\n};\n\nexport default useCriptomoneda; \n","import React, { useEffect, useState } from 'react';\nimport Error from './Error';\nimport styled from '@emotion/styled'; \n\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomoneda from '../hooks/useCriptomoneda';\nimport axios from 'axios';\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none; \n  width: 100%;\n  border-radius: 10px; \n  color: #FFF;\n  transition:  background-color .3s ease; \n   \n  &:hover{\n     background-color: #326AC0; \n     cursor: pointer; \n  }\n`; \n\nconst Formulario = ({guardarMoneda, guadarCriptomoneda}) => {\n  // State del listado de criptomonedas\n  const [listadocript, guardarCriptomonedas] = useState([]);\n  const [error, guardarError] = useState(false);\n\n\n  const MONEDAS = [\n    {codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\n    {codigo: 'MXN', nombre: 'Peso Mexicano'}, \n    {codigo: 'EUR', nombre: 'Euro'}, \n    {codigo: 'GBP', nombre: 'Libra Esterlina '},\n  ]; \n  \n  // Utilizar useMoneda \n  const [moneda, SelectMonedas ] = useMoneda('Elige tu moneda', '', MONEDAS);\n\n  // Utilizar useCriptomoneda\n  const [criptomoneda, SelectCripto] = useCriptomoneda('Elige tu criptomoneda', '', listadocript);\n\n  // Ejecutar llamada a la API\n  useEffect(() => { \n    const consultarAPI =  async () => {\n      const url =  'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n      const resultado = await axios.get(url);\n\n      guardarCriptomonedas(resultado.data.Data );\n      \n    }\n    consultarAPI()\n\n  }, []);\n\n  // Cuando el usuario hace submit\n  const cotizarMoneda = (e) => {\n    e.preventDefault()\n\n    // Validar si ambos campos estan llenos\n    if(moneda === '' || criptomoneda === ''){\n        guardarError(true);\n        return;\n    }\n    \n    // Pasar los datos al componente principal\n    guardarError(false);\n    guardarMoneda(moneda);\n    guadarCriptomoneda(criptomoneda); \n  }\n\n  return ( \n    <form\n      onSubmit={cotizarMoneda }\n    >\n      {error ? <Error mensage='Todos los campos son obligatorios' /> : null}\n      <SelectMonedas />\n      <SelectCripto />\n      <Boton\n        type='submit'\n        value='calcular ' \n      /> \n    </form>\n   );\n}\n \nexport default Formulario;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Resultado = styled.div`\n    color: #FFF;\n    font-family: Arial, Helvetica, sans-serif;\n`;\n\nconst Info  = styled.p`\n    font-size: 18px;\n\n    span {\n      font-weight: bold;\n    }\n`;\n\nconst Precio = styled.p`\n    font-size: 30px;\n\n    span{\n      font-weight: bold;\n    }\n `;\n\nconst Cotizacion = ({resultado}) => {\n  if(Object.keys(resultado).length === 0) return null; \n  console.log(resultado);\n  \n   \n  return ( \n    <Resultado>\n       <Precio>El precio es: <span>{resultado.PRICE}</span></Precio>\n       <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span></Info>\n       <Info>P recio más bajo del día: <span>{resultado.LOWDAY}</span></Info>\n       <Info>Variación de las últimas 24 hrs: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\n       <Info>Última actualización: <span>{resultado.LASTUPDATE }</span></Info>\n    </Resultado>\n    );\n}\n \nexport default Cotizacion;","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return ( \n    <div class=\"sk-chase\">\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n    </div>\n   );\n}\n \nexport default Spinner;","import React, {useState, useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport imagen from '../cryptomonedas.png';\nimport Formulario from './Formulario'; \nimport Cotizacion from './Cotizacion';\nimport Spinner from './Spinner';\nimport '../index.css';\n\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media(min-width: 992px){\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }`;\n\nconst Imagen = styled.img`\n    max-width: 100%;\n    margin-top: 5rem; \n  `;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left; \n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n\n`;\n\n\nconst AppContainer = () => {\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guadarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false)\n\n  useEffect(() => {\n  \n    const cotizarCriptomoneda = async () => {\n        // Evitamos la ejecución la primera vez  \n    if(moneda === '' ) return;\n\n    // Consultar la api para obtener la cotización \n     const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n     const resultado = await axios.get(url);\n\n     // Mostrar el spinner\n     guardarCargando(true)\n\n     // Ocultar el Spinner y mostrar el resultado \n      setTimeout(() => {\n\n        // Cambiar el estado de cargando\n        guardarCargando(false)\n\n        // Guardar cotización \n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000)\n\n    }\n    cotizarCriptomoneda();\n     \n\n  }, [moneda, criptomoneda]);\n\n  // Mostrar spinner o resultado \n  const componente = (cargando) ? <Spinner /> :  <Cotizacion resultado={resultado}/>\n\n  return ( \n    <Contenedor>\n      <div>\n        <Imagen \n          src={imagen}\n          alt='imagen crypto'\n        />\n      </div>\n      <div>\n        <Heading>Cotiza monedas al instante</Heading>\n        <Formulario \n          guardarMoneda={guardarMoneda}\n          guadarCriptomoneda={guadarCriptomoneda}\n        />\n       {componente}\n      </div>\n    </Contenedor>\n   );\n}\n \nexport default AppContainer;","import React from 'react';\nimport AppContainer from './components/AppContainer';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={AppContainer} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}